const start_btn = document.getElementById("startbtn");
const frontpage = document.getElementById("frontpage");

//on click of play button the game will be shown
start_btn.addEventListener("click", () => {
  document.addEventListener("DOMContentLoaded", showGame());
  start_btn.style.display = "none";
  frontpage.style.display = "none";
  document.getElementById("h1").style.display = "none";
});

//function to show the background grid,the doodler and the platforms on click of play button
const showGame = () => {
  const container = document.querySelector(".container");
  const grid = document.createElement("div");
  //place doodler left corner

  let platformList = [];
  // var platYChange = 0;
  // var gameStarted;
  let isGameOver = false;
  let score = 0;
  let doodlerLeftSpace = 50;
  // let doodlerstart = 250;
  let doodlerbottomSpace = 30;
  let upTimerId; //intervalId returned by setInterval() of jumpDoodler function
  let downTimerId; //intervalId returned by setInterval() of fallDoodler function
  let numOfPlatforms = Math.random() * 8 + 2; //genegate platfors between 5 to 12.

  //create the background grid on click of play button
  const createGrid = () => {
    container.appendChild(grid); //append the grid inside the container
    grid.classList.add("grid-container"); //set class to the grid
  };
  createGrid(); //call function to show the grid

  const doodler = document.createElement("div"); //create div for doodler
  //create doodler and append it inside the background grid
  const createDoodler = () => {
    grid.appendChild(doodler); //append the doodler to the grid
    doodler.classList.add("doodler"); //add doodler class
    doodler.style.left = doodlerLeftSpace + "px"; //add left margin
    doodler.style.bottom = doodlerbottomSpace + "px"; //add bottom margin
  };

  //function to make the doodler jump
  const jumpDoodler = () => {
    clearInterval(downTimerId); //stop fallDoodler() by setting its intervalID in clearinterval()

    //function to add 5px to the doodler bottom to make it move upward
    upTimerId = setInterval(() => {
      doodlerbottomSpace += 5;
      doodler.style.bottom = doodlerbottomSpace + "px";
      if (doodlerbottomSpace > 550)
        //if the bottom margin of the doodler is greater than the grid height then it will fall.

        fallDoodler();
    }, 30);
  };

  const fallDoodler = () => {
    clearInterval(upTimerId); //stop jumpDoodler() by setting its intervalID in clearinterval()

    //function to decrease the doodler bottom space to 5px in every 20miliseconds to make it look fall.
    downTimerId = setInterval(() => {
      doodlerbottomSpace -= 5;
      doodler.style.bottom = doodlerbottomSpace + "px";
      //if the doodler bottom space comes to 0 or less then gameOver function is called
      if (doodlerbottomSpace <= 0) gameOver();
    }, 20);
  };

  //gameOver function
  const gameOver = () => {
    isGameOver = true;
    while (grid.firstChild) {
      //remove all child of grid
      grid.removeChild(grid.firstChild);
    }
    grid.innerHTML = `<h1>${score}<br/>GAME OVER</h1>`;

    clearInterval(upTimerId);
    clearInterval(downTimerId);
  };
  //function to create platforms for the doodler to jump on the grid
  const createPlatforms = () => {
    for (i = 0; i < numOfPlatforms; i++) {
      const platformGap = 700 / numOfPlatforms; //provide the gap need to be there in between platforms that is generated by dividing the height of the grid by the number of platforms per grid.
      const newPlatformPosition = i * platformGap;

      //create new platform using constructor till forloop runs by taking the platform position as parameter
      let newplatform = new Platform(newPlatformPosition);
      platformList.push(newplatform); //push the platform to platformList array.
      // console.log(platformList)
    }
  };

  //constructor class for platform
  class Platform {
    constructor(newPlatformPosition) {
      this.left = Math.random() * 350; //provide random left margin to the platforms with in the grid width
      this.bottom = newPlatformPosition; //probide platform bottom margin
      this.visual = document.createElement("div"); //create div element for platform
      this.visual.classList.add("platform"); //add class name to the platform
      this.visual.style.left = this.left + "px";
      // console.log(visuall.style.left)
      this.visual.style.bottom = this.bottom + "px";
      grid.appendChild(this.visual); //append the platform inside the grid
    }
  }
  // createPlatforms();

  //function to move platform downward
  function movePlatforms() {
    if (doodlerbottomSpace > 20) {
      //if the doodler is inside the grid then perform the if statement
      platformList.forEach((platform) => {
        platform.bottom -= 3;
        let visual = platform.visual;
        visual.style.bottom = platform.bottom + "px"; //decrease the platform bottom margin by 3px for eachplatform inside theplatformlist array

        if (platform.bottom < 4) {
          let firstPlatform = platformList[0].visual;
          firstPlatform.classList.remove("platform"); //remove class when the platform bottom space is less than 4px
          platformList.shift(); //remove the platform from the array

          score++; //score will be increased by 1 after one platform is shifted from the array
          let addnewPlatform = new Platform(650); //add new platform using constructor class having bottom space equal to the height of the grid
          platformList.push(addnewPlatform); //push new platform to the array
        }
      });
    }
  }

  if (!isGameOver) {
    //if game is not over
    createPlatforms();
    createDoodler(); //call the doodler function to show the doodler inside the background grid

    setInterval(movePlatforms, 20); //call the moveplatform function in each time interval of 20miliseconds.
    jumpDoodler();
  }
};
